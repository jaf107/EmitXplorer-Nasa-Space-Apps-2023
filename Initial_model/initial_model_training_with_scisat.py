# -*- coding: utf-8 -*-
"""Initial_model_training_with_SCISAT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bQALHLmDcAmzTOdUyqvOsLSY-ZJKC2js

<h3 style="color:purple">Train initial regression model with SCISAT data</h3>
"""

import pandas as pd
import numpy as np
from datetime import datetime
from sklearn import linear_model

df = pd.read_csv('co2.csv')
df

def date_to_float(date_str):
    try:
        # Parse the date string into a datetime object
        date_obj = datetime.strptime(date_str, '%m/%d/%Y')  # Adjust the format if needed
        # Convert the datetime object to a Unix timestamp (float)
        timestamp = date_obj.timestamp()
        return timestamp
    except ValueError:
        # Handle invalid date strings here if necessary
        return None

df['date'] = df['date'].apply(date_to_float)
print(df)

columns_with_nan = df.columns[df.isna().any()].tolist()

if len(columns_with_nan) > 0:
    print("Columns with NaN values:")
    for column_name in columns_with_nan:
        print(column_name)
else:
    print("No columns have NaN values.")

"""**Data Preprocessing: Fill NA values with median value of a column**"""

df.date = df.date.fillna(df.date.median())
df.Alt_Mean = df.Alt_Mean.fillna(df.Alt_Mean.median())
df['std CO2'] = df['std CO2'].fillna(df['std CO2'].median())

reg = linear_model.LinearRegression()
reg.fit(df.drop('std CO2',axis='columns'),df['std CO2'])

reg.coef_

reg.intercept_

"""**Test initial model**"""

reg.predict([[df.Alt_Mean.median(), date_to_float('9/16/2045'), -80.79, -137.12]])

"""**Test initial model**"""

reg.predict([[df.Alt_Mean.median(), date_to_float('9/20/2020'), -80.79, -137.12]])